package com.up.terrainengine.gui;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import com.up.terrainengine.util.TypeReference;
import com.up.terrainengine.operator.Operator;
import com.up.terrainengine.operator.Operators;
import com.up.terrainengine.structures.VectorMap;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.BoxLayout;

/**
 *
 * @author Ricky
 */
public class MainDisplay extends Frame {

    /**
     * Creates new form MainDisplay
     */
    public MainDisplay() {
        initComponents();
        operatorsDialog.pack();
    }

    private static ObjectMapper mapper = new ObjectMapper();
    static {
        mapper.activateDefaultTyping(BasicPolymorphicTypeValidator.builder().allowIfBaseType(Object.class).build());
        mapper.registerModule(new ParameterNamesModule(JsonCreator.Mode.PROPERTIES));
        SimpleModule colorMod = new SimpleModule("color");
        colorMod.addDeserializer(Color.class, new JsonDeserializer<Color>() {
            @Override
            public Color deserialize(JsonParser jp, DeserializationContext dc) throws IOException, JsonProcessingException {
                return new Color(jp.getIntValue());
            }
        });
        colorMod.addSerializer(Color.class, new JsonSerializer<Color>() {
            @Override
            public void serialize(Color c, JsonGenerator jg, SerializerProvider sp) throws IOException {
                jg.writeNumber(c.getRGB());
            }
        });
        mapper.registerModule(colorMod);
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        operatorsDialog = new Dialog(this);
        panel2 = new Panel();
        label2 = new Label();
        choice1 = new Choice();
        Stream.of(Operators.getOperators())
        .map((Class<? extends Operator> o) -> {
            try {
                return o.newInstance().getName();
            } catch (Exception e) {
                e.printStackTrace();
                return "[Error building operator]";
            }
        })
        .forEach(choice1::addItem);
        panel1 = new Panel();
        addButton = new Button();
        cancelButton = new Button();
        rightClickMenu = new PopupMenu();
        addOperatorMenu = new Menu();
        graphDisplay = new GraphDisplay();
        menuBar = new MenuBar();
        fileMenu = new Menu();
        openFile = new MenuItem();
        saveFile = new MenuItem();
        editMenu = new Menu();
        addOperator = new MenuItem();

        operatorsDialog.setResizable(false);
        operatorsDialog.setTitle("Add New Operator");
        operatorsDialog.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                operatorsDialogWindowClosing(evt);
            }
        });
        operatorsDialog.setLayout(new BoxLayout(operatorsDialog, BoxLayout.Y_AXIS));

        label2.setText("Type");
        panel2.add(label2);
        panel2.add(choice1);

        operatorsDialog.add(panel2);

        addButton.setLabel("Add");
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        panel1.add(addButton);

        cancelButton.setLabel("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        panel1.add(cancelButton);

        operatorsDialog.add(panel1);

        rightClickMenu.setLabel("popupMenu1");

        addOperatorMenu.setActionCommand("Add Operator");
        addOperatorMenu.setLabel("Add Operator...");
        Stream.of(Operators.getOperators())
        .map((Class<? extends Operator> o) -> {
            String text;
            try {
                text = o.newInstance().getName();
            } catch (Exception e) {
                e.printStackTrace();
                text = "[Error building operator]";
            }
            MenuItem i = new MenuItem(text);
            i.addActionListener((ActionEvent e) -> addOperator(o));
            return i;
        })
        .forEach(addOperatorMenu::add);
        rightClickMenu.add(addOperatorMenu);
        addOperatorMenu.getAccessibleContext().setAccessibleName("");
        addOperatorMenu.getAccessibleContext().setAccessibleDescription("");

        setTitle("Terrain Engine");
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(new BoxLayout(this, BoxLayout.LINE_AXIS));

        graphDisplay.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                graphDisplayMouseClicked(evt);
            }
        });
        add(graphDisplay);

        fileMenu.setLabel("File");

        openFile.setLabel("Open");
        openFile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        fileMenu.add(openFile);

        saveFile.setLabel("Save");
        fileMenu.add(saveFile);

        menuBar.add(fileMenu);

        editMenu.setLabel("Edit");

        addOperator.setActionCommand("addOperator");
        addOperator.setLabel("Add Operator...");
        addOperator.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addOperatorActionPerformed(evt);
            }
        });
        editMenu.add(addOperator);

        menuBar.add(editMenu);

        setMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
//        dispose();
    }//GEN-LAST:event_exitForm

    private void addOperatorActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addOperatorActionPerformed
        operatorsDialog.setVisible(true);
    }//GEN-LAST:event_addOperatorActionPerformed

    private void addButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addOperator(Operators.getOperators()[choice1.getSelectedIndex()]);
    }//GEN-LAST:event_addButtonActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        operatorsDialog.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void operatorsDialogWindowClosing(WindowEvent evt) {//GEN-FIRST:event_operatorsDialogWindowClosing
        operatorsDialog.setVisible(false);
    }//GEN-LAST:event_operatorsDialogWindowClosing

    private void openFileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        try {
            String json = mapper.writeValueAsString(graphDisplay.getNodes().stream().map(n -> n.getOperator()).toArray(Operator[]::new));
            Operator[] os = mapper.readValue(json, Operator[].class);
        } catch (JsonProcessingException ex) {
            Logger.getLogger(MainDisplay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void graphDisplayMouseClicked(MouseEvent evt) {//GEN-FIRST:event_graphDisplayMouseClicked
        if (evt.getButton() == 3) {
            graphDisplay.add(rightClickMenu);
            rightClickMenu.show(graphDisplay, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_graphDisplayMouseClicked

    private void addOperator(Class oc) {
        try {
            Operator o;
            if (oc.getSimpleName().equals("Provider")) {
                try {
                    o = (Operator)oc.getConstructor(TypeReference.class).newInstance(new TypeReference<VectorMap<Double>>() {});
                } catch (Exception ex) {
                    o = null;
                }
            } else {
                o = (Operator)oc.newInstance();
            }
            graphDisplay.addNode(o);
            operatorsDialog.setVisible(false);
        } catch (InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(MainDisplay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Button addButton;
    private MenuItem addOperator;
    private Menu addOperatorMenu;
    private Button cancelButton;
    private Choice choice1;
    private Menu editMenu;
    private Menu fileMenu;
    public GraphDisplay graphDisplay;
    private Label label2;
    private MenuBar menuBar;
    private MenuItem openFile;
    private Dialog operatorsDialog;
    private Panel panel1;
    private Panel panel2;
    private PopupMenu rightClickMenu;
    private MenuItem saveFile;
    // End of variables declaration//GEN-END:variables
}
